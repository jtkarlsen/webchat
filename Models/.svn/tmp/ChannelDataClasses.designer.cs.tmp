#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebChat.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gruppe2_h12")]
	public partial class ChannelDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void InsertBanned_user(Banned_user instance);
    partial void UpdateBanned_user(Banned_user instance);
    partial void DeleteBanned_user(Banned_user instance);
<<<<<<< .mine
    partial void InsertModerator(Moderator instance);
    partial void UpdateModerator(Moderator instance);
    partial void DeleteModerator(Moderator instance);
=======
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertChatroom(Chatroom instance);
    partial void UpdateChatroom(Chatroom instance);
    partial void DeleteChatroom(Chatroom instance);
    partial void InsertUsersInChatroom(UsersInChatroom instance);
    partial void UpdateUsersInChatroom(UsersInChatroom instance);
    partial void DeleteUsersInChatroom(UsersInChatroom instance);
>>>>>>> .r50
    partial void InsertPermitted_user(Permitted_user instance);
    partial void UpdatePermitted_user(Permitted_user instance);
    partial void DeletePermitted_user(Permitted_user instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    #endregion
		
		public ChannelDataClassesDataContext() : 
<<<<<<< .mine
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["gruppe2_h12ConnectionString1"].ConnectionString, mappingSource)
=======
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString, mappingSource)
>>>>>>> .r50
		{
			OnCreated();
		}
		
		public ChannelDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<Banned_user> Banned_users
		{
			get
			{
				return this.GetTable<Banned_user>();
			}
		}
		
		public System.Data.Linq.Table<Moderator> Moderators
		{
			get
			{
				return this.GetTable<Moderator>();
			}
		}
		
<<<<<<< .mine
		public System.Data.Linq.Table<Permitted_user> Permitted_users
		{
			get
			{
				return this.GetTable<Permitted_user>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
=======
		public System.Data.Linq.Table<Chatroom> Chatrooms
>>>>>>> .r50
		{
			get
			{
				return this.GetTable<Chatroom>();
			}
		}
		
<<<<<<< .mine
		public System.Data.Linq.Table<Image> Images
=======
		public System.Data.Linq.Table<UsersInChatroom> UsersInChatrooms
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this.GetTable<Image>();
=======
				return this.GetTable<UsersInChatroom>();
>>>>>>> .r50
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _AuthorId;
		
		private System.DateTime _Date;
		
		private int _Chatroom;
		
		private string _Message1;
		
<<<<<<< .mine
=======
		private System.Nullable<int> _imageId;
		
>>>>>>> .r50
		private EntityRef<Image> _Image;
		
		private EntitySet<Message> _Messages;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Chatroom> _Chatroom1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAuthorIdChanging(System.Guid value);
    partial void OnAuthorIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnChatroomChanging(int value);
    partial void OnChatroomChanged();
    partial void OnMessage1Changing(string value);
    partial void OnMessage1Changed();
    partial void OnimageIdChanging(System.Nullable<int> value);
    partial void OnimageIdChanged();
    #endregion
		
		public Message()
		{
<<<<<<< .mine
			this._Banned_users = new EntitySet<Banned_user>(new Action<Banned_user>(this.attach_Banned_users), new Action<Banned_user>(this.detach_Banned_users));
			this._Moderators = new EntitySet<Moderator>(new Action<Moderator>(this.attach_Moderators), new Action<Moderator>(this.detach_Moderators));
			this._Permitted_users = new EntitySet<Permitted_user>(new Action<Permitted_user>(this.attach_Permitted_users), new Action<Permitted_user>(this.detach_Permitted_users));
=======
			this._Image = default(EntityRef<Image>);
>>>>>>> .r50
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Chatroom1 = default(EntityRef<Chatroom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chatroom", DbType="Int NOT NULL")]
		public int Chatroom
		{
			get
			{
				return this._Chatroom;
			}
			set
			{
				if ((this._Chatroom != value))
				{
					if (this._Chatroom1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatroomChanging(value);
					this.SendPropertyChanging();
					this._Chatroom = value;
					this.SendPropertyChanged("Chatroom");
					this.OnChatroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Message", Storage="_Message1", DbType="NVarChar(MAX)")]
		public string Message1
		{
			get
			{
				return this._Message1;
			}
			set
			{
				if ((this._Message1 != value))
				{
					this.OnMessage1Changing(value);
					this.SendPropertyChanging();
					this._Message1 = value;
					this.SendPropertyChanged("Message1");
					this.OnMessage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="Int")]
		public System.Nullable<int> imageId
		{
			get
			{
				return this._imageId;
			}
			set
			{
				if ((this._imageId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Message", Storage="_Image", ThisKey="imageId", OtherKey="id", IsForeignKey=true)]
		internal Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._imageId = value.id;
					}
					else
					{
						this._imageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Message", Storage="_aspnet_User", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		internal aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Moderator", Storage="_Moderators", ThisKey="Id", OtherKey="Chatroom")]
		public EntitySet<Moderator> Moderators
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Message", Storage="_Chatroom1", ThisKey="Chatroom", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal Chatroom Chatroom1
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._Moderators;
=======
				return this._Chatroom1.Entity;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				this._Moderators.Assign(value);
=======
				Chatroom previousValue = this._Chatroom1.Entity;
				if (((previousValue != value) 
							|| (this._Chatroom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chatroom1.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Chatroom1.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._Chatroom = value.Id;
					}
					else
					{
						this._Chatroom = default(int);
					}
					this.SendPropertyChanged("Chatroom1");
				}
>>>>>>> .r50
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Permitted_user", Storage="_Permitted_users", ThisKey="Id", OtherKey="Chatroom")]
		public EntitySet<Permitted_user> Permitted_users
=======
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
>>>>>>> .r50
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Data.Linq.Binary _image1;
		
		private string _imageType;
		
		private long _imageSize;
		
		private string _imageName;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onimage1Changing(System.Data.Linq.Binary value);
    partial void Onimage1Changed();
    partial void OnimageTypeChanging(string value);
    partial void OnimageTypeChanged();
    partial void OnimageSizeChanging(long value);
    partial void OnimageSizeChanged();
    partial void OnimageNameChanging(string value);
    partial void OnimageNameChanged();
    #endregion
		
		public Image()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
<<<<<<< .mine
				return this._Permitted_users;
=======
				return this._id;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				this._Permitted_users.Assign(value);
=======
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
>>>>>>> .r50
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Message", Storage="_Messages", ThisKey="Id", OtherKey="Chatroom")]
		public EntitySet<Message> Messages
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="image", Storage="_image1", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image1
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._Messages;
=======
				return this._image1;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				this._Messages.Assign(value);
=======
				if ((this._image1 != value))
				{
					this.Onimage1Changing(value);
					this.SendPropertyChanging();
					this._image1 = value;
					this.SendPropertyChanged("image1");
					this.Onimage1Changed();
				}
>>>>>>> .r50
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imageType
		{
			get
			{
				return this._imageType;
			}
			set
			{
				if ((this._imageType != value))
				{
					this.OnimageTypeChanging(value);
					this.SendPropertyChanging();
					this._imageType = value;
					this.SendPropertyChanged("imageType");
					this.OnimageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageSize", DbType="BigInt NOT NULL")]
		public long imageSize
		{
			get
			{
				return this._imageSize;
			}
			set
			{
				if ((this._imageSize != value))
				{
					this.OnimageSizeChanging(value);
					this.SendPropertyChanging();
					this._imageSize = value;
					this.SendPropertyChanged("imageSize");
					this.OnimageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imageName
		{
			get
			{
				return this._imageName;
			}
			set
			{
				if ((this._imageName != value))
				{
					this.OnimageNameChanging(value);
					this.SendPropertyChanging();
					this._imageName = value;
					this.SendPropertyChanged("imageName");
					this.OnimageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Message", Storage="_Messages", ThisKey="id", OtherKey="imageId")]
		internal EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
<<<<<<< .mine
		private void attach_Moderators(Moderator entity)
=======
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
>>>>>>> .r50
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			OnCreated();
		}
		
<<<<<<< .mine
		private void detach_Moderators(Moderator entity)
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
>>>>>>> .r50
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
<<<<<<< .mine
		private void attach_Permitted_users(Permitted_user entity)
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
>>>>>>> .r50
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
<<<<<<< .mine
		private void detach_Permitted_users(Permitted_user entity)
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
>>>>>>> .r50
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
<<<<<<< .mine
		private void attach_Messages(Message entity)
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
>>>>>>> .r50
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		internal EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
<<<<<<< .mine
		private void detach_Messages(Message entity)
=======
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
>>>>>>> .r50
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		internal aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Banned_users")]
	public partial class Banned_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private int _Chatroom;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Chatroom> _Chatroom1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnChatroomChanging(int value);
    partial void OnChatroomChanged();
    #endregion
		
		public Banned_user()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Chatroom1 = default(EntityRef<Chatroom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chatroom", DbType="Int NOT NULL")]
		public int Chatroom
		{
			get
			{
				return this._Chatroom;
			}
			set
			{
				if ((this._Chatroom != value))
				{
					if (this._Chatroom1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatroomChanging(value);
					this.SendPropertyChanging();
					this._Chatroom = value;
					this.SendPropertyChanged("Chatroom");
					this.OnChatroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Banned_user", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Banned_users.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Banned_users.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Banned_user", Storage="_Chatroom1", ThisKey="Chatroom", OtherKey="Id", IsForeignKey=true)]
		internal Chatroom Chatroom1
		{
			get
			{
				return this._Chatroom1.Entity;
			}
			set
			{
				Chatroom previousValue = this._Chatroom1.Entity;
				if (((previousValue != value) 
							|| (this._Chatroom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chatroom1.Entity = null;
						previousValue.Banned_users.Remove(this);
					}
					this._Chatroom1.Entity = value;
					if ((value != null))
					{
						value.Banned_users.Add(this);
						this._Chatroom = value.Id;
					}
					else
					{
						this._Chatroom = default(int);
					}
					this.SendPropertyChanged("Chatroom1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Moderators")]
	public partial class Moderator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private int _Chatroom;
		
		private EntityRef<Chatroom> _Chatroom1;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
<<<<<<< .mine
=======
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private string _MobilePhoneNumber;
		
		private int _imageId;
		
		private bool _Admin;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<Banned_user> _Banned_users;
		
		private EntitySet<Chatroom> _Chatrooms;
		
		private EntitySet<UsersInChatroom> _UsersInChatrooms;
		
		private EntitySet<Permitted_user> _Permitted_users;
		
>>>>>>> .r50
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnChatroomChanging(int value);
    partial void OnChatroomChanged();
    partial void OnMobilePhoneNumberChanging(string value);
    partial void OnMobilePhoneNumberChanged();
    partial void OnimageIdChanging(int value);
    partial void OnimageIdChanged();
    partial void OnAdminChanging(bool value);
    partial void OnAdminChanged();
    #endregion
		
		public Moderator()
		{
<<<<<<< .mine
			this._Chatroom1 = default(EntityRef<Chatroom>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
=======
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._Banned_users = new EntitySet<Banned_user>(new Action<Banned_user>(this.attach_Banned_users), new Action<Banned_user>(this.detach_Banned_users));
			this._Chatrooms = new EntitySet<Chatroom>(new Action<Chatroom>(this.attach_Chatrooms), new Action<Chatroom>(this.detach_Chatrooms));
			this._UsersInChatrooms = new EntitySet<UsersInChatroom>(new Action<UsersInChatroom>(this.attach_UsersInChatrooms), new Action<UsersInChatroom>(this.detach_UsersInChatrooms));
			this._Permitted_users = new EntitySet<Permitted_user>(new Action<Permitted_user>(this.attach_Permitted_users), new Action<Permitted_user>(this.detach_Permitted_users));
>>>>>>> .r50
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chatroom", DbType="Int NOT NULL")]
		public int Chatroom
		{
			get
			{
				return this._Chatroom;
			}
			set
			{
				if ((this._Chatroom != value))
				{
					if (this._Chatroom1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatroomChanging(value);
					this.SendPropertyChanging();
					this._Chatroom = value;
					this.SendPropertyChanged("Chatroom");
					this.OnChatroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Moderator", Storage="_Chatroom1", ThisKey="Chatroom", OtherKey="Id", IsForeignKey=true)]
		public Chatroom Chatroom1
		{
			get
			{
				return this._Chatroom1.Entity;
			}
			set
			{
				Chatroom previousValue = this._Chatroom1.Entity;
				if (((previousValue != value) 
							|| (this._Chatroom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chatroom1.Entity = null;
						previousValue.Moderators.Remove(this);
					}
					this._Chatroom1.Entity = value;
					if ((value != null))
					{
						value.Moderators.Add(this);
						this._Chatroom = value.Id;
					}
					else
					{
						this._Chatroom = default(int);
					}
					this.SendPropertyChanged("Chatroom1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Moderator", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Moderators.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Moderators.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permitted_users")]
	public partial class Permitted_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private int _Chatroom;
		
		private EntityRef<Chatroom> _Chatroom1;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnChatroomChanging(int value);
    partial void OnChatroomChanged();
    #endregion
		
		public Permitted_user()
		{
			this._Chatroom1 = default(EntityRef<Chatroom>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhoneNumber", DbType="NVarChar(10)")]
		public string MobilePhoneNumber
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._UserId;
=======
				return this._MobilePhoneNumber;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
=======
				if ((this._MobilePhoneNumber != value))
				{
					this.OnMobilePhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._MobilePhoneNumber = value;
					this.SendPropertyChanged("MobilePhoneNumber");
					this.OnMobilePhoneNumberChanged();
				}
>>>>>>> .r50
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chatroom", DbType="Int NOT NULL")]
		public int Chatroom
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="Int NOT NULL")]
		public int imageId
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._Chatroom;
=======
				return this._imageId;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				if ((this._Chatroom != value))
				{
					if (this._Chatroom1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatroomChanging(value);
					this.SendPropertyChanging();
					this._Chatroom = value;
					this.SendPropertyChanged("Chatroom");
					this.OnChatroomChanged();
				}
=======
				if ((this._imageId != value))
				{
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
>>>>>>> .r50
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Permitted_user", Storage="_Chatroom1", ThisKey="Chatroom", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Chatroom Chatroom1
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit NOT NULL")]
		public bool Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Message", Storage="_Messages", ThisKey="UserId", OtherKey="AuthorId")]
		internal EntitySet<Message> Messages
>>>>>>> .r50
		{
			get
			{
				return this._Chatroom1.Entity;
			}
			set
			{
				Chatroom previousValue = this._Chatroom1.Entity;
				if (((previousValue != value) 
							|| (this._Chatroom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chatroom1.Entity = null;
						previousValue.Permitted_users.Remove(this);
					}
					this._Chatroom1.Entity = value;
					if ((value != null))
					{
						value.Permitted_users.Add(this);
						this._Chatroom = value.Id;
					}
					else
					{
						this._Chatroom = default(int);
					}
					this.SendPropertyChanged("Chatroom1");
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Permitted_user", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public aspnet_User aspnet_User
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		internal EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._aspnet_User.Entity;
=======
				return this._aspnet_UsersInRoles;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Permitted_users.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Permitted_users.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
=======
				this._aspnet_UsersInRoles.Assign(value);
>>>>>>> .r50
			}
		}
		
<<<<<<< .mine
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Banned_user", Storage="_Banned_users", ThisKey="UserId", OtherKey="UserId")]
		internal EntitySet<Banned_user> Banned_users
		{
			get
			{
				return this._Banned_users;
			}
			set
			{
				this._Banned_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chatroom", Storage="_Chatrooms", ThisKey="UserId", OtherKey="OwnerId")]
		internal EntitySet<Chatroom> Chatrooms
		{
			get
			{
				return this._Chatrooms;
			}
			set
			{
				this._Chatrooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UsersInChatroom", Storage="_UsersInChatrooms", ThisKey="UserId", OtherKey="userId")]
		internal EntitySet<UsersInChatroom> UsersInChatrooms
		{
			get
			{
				return this._UsersInChatrooms;
			}
			set
			{
				this._UsersInChatrooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Permitted_user", Storage="_Permitted_users", ThisKey="UserId", OtherKey="UserId")]
		internal EntitySet<Permitted_user> Permitted_users
		{
			get
			{
				return this._Permitted_users;
			}
			set
			{
				this._Permitted_users.Assign(value);
			}
		}
		
>>>>>>> .r50
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
<<<<<<< .mine
=======
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Banned_users(Banned_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Banned_users(Banned_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Chatrooms(Chatroom entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Chatrooms(Chatroom entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UsersInChatrooms(UsersInChatroom entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UsersInChatrooms(UsersInChatroom entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Permitted_users(Permitted_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Permitted_users(Permitted_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
>>>>>>> .r50
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chatrooms")]
	public partial class Chatroom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _IsPublic;
		
		private System.Guid _OwnerId;
		
		private System.DateTime _Date;
		
		private string _Name;
		
		private string _Active;
		
<<<<<<< .mine
		private System.Nullable<int> _imageId;
=======
		private EntitySet<Message> _Messages;
		
		private EntitySet<Banned_user> _Banned_users;
		
		private EntitySet<UsersInChatroom> _UsersInChatrooms;
		
		private EntitySet<Permitted_user> _Permitted_users;
		
		private EntityRef<aspnet_User> _aspnet_User;
>>>>>>> .r50
		
		private EntityRef<Image> _Image;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIsPublicChanging(string value);
    partial void OnIsPublicChanged();
    partial void OnOwnerIdChanging(System.Guid value);
    partial void OnOwnerIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(string value);
    partial void OnActiveChanged();
    partial void OnimageIdChanging(System.Nullable<int> value);
    partial void OnimageIdChanged();
    #endregion
		
		public Chatroom()
		{
<<<<<<< .mine
			this._Chatroom1 = default(EntityRef<Chatroom>);
			this._Image = default(EntityRef<Image>);
=======
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Banned_users = new EntitySet<Banned_user>(new Action<Banned_user>(this.attach_Banned_users), new Action<Banned_user>(this.detach_Banned_users));
			this._UsersInChatrooms = new EntitySet<UsersInChatroom>(new Action<UsersInChatroom>(this.attach_UsersInChatrooms), new Action<UsersInChatroom>(this.detach_UsersInChatrooms));
			this._Permitted_users = new EntitySet<Permitted_user>(new Action<Permitted_user>(this.attach_Permitted_users), new Action<Permitted_user>(this.detach_Permitted_users));
>>>>>>> .r50
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="Int")]
		public System.Nullable<int> imageId
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Message", Storage="_Messages", ThisKey="Id", OtherKey="Chatroom")]
		internal EntitySet<Message> Messages
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._imageId;
=======
				return this._Messages;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				if ((this._imageId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Message", Storage="_Chatroom1", ThisKey="Chatroom", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Chatroom Chatroom1
		{
			get
			{
				return this._Chatroom1.Entity;
			}
			set
			{
				Chatroom previousValue = this._Chatroom1.Entity;
				if (((previousValue != value) 
							|| (this._Chatroom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chatroom1.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Chatroom1.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._Chatroom = value.Id;
					}
					else
					{
						this._Chatroom = default(int);
					}
					this.SendPropertyChanged("Chatroom1");
				}
=======
				this._Messages.Assign(value);
>>>>>>> .r50
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Message", Storage="_Image", ThisKey="imageId", OtherKey="id", IsForeignKey=true)]
		public Image Image
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Banned_user", Storage="_Banned_users", ThisKey="Id", OtherKey="Chatroom")]
		internal EntitySet<Banned_user> Banned_users
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._Image.Entity;
=======
				return this._Banned_users;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				Image previousValue = this._Image.Entity;
=======
				this._Banned_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_UsersInChatroom", Storage="_UsersInChatrooms", ThisKey="Id", OtherKey="chatId")]
		internal EntitySet<UsersInChatroom> UsersInChatrooms
		{
			get
			{
				return this._UsersInChatrooms;
			}
			set
			{
				this._UsersInChatrooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Permitted_user", Storage="_Permitted_users", ThisKey="Id", OtherKey="Chatroom")]
		internal EntitySet<Permitted_user> Permitted_users
		{
			get
			{
				return this._Permitted_users;
			}
			set
			{
				this._Permitted_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chatroom", Storage="_aspnet_User", ThisKey="OwnerId", OtherKey="UserId", IsForeignKey=true)]
		internal aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
>>>>>>> .r50
				if (((previousValue != value) 
<<<<<<< .mine
							|| (this._Image.HasLoadedOrAssignedValue == false)))
=======
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
>>>>>>> .r50
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
<<<<<<< .mine
						this._Image.Entity = null;
						previousValue.Messages.Remove(this);
=======
						this._aspnet_User.Entity = null;
						previousValue.Chatrooms.Remove(this);
>>>>>>> .r50
					}
<<<<<<< .mine
					this._Image.Entity = value;
=======
					this._aspnet_User.Entity = value;
>>>>>>> .r50
					if ((value != null))
					{
<<<<<<< .mine
						value.Messages.Add(this);
						this._imageId = value.id;
=======
						value.Chatrooms.Add(this);
						this._OwnerId = value.UserId;
>>>>>>> .r50
					}
					else
					{
<<<<<<< .mine
						this._imageId = default(Nullable<int>);
=======
						this._OwnerId = default(System.Guid);
>>>>>>> .r50
					}
<<<<<<< .mine
					this.SendPropertyChanged("Image");
=======
					this.SendPropertyChanged("aspnet_User");
>>>>>>> .r50
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Message", Storage="_aspnet_User", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom1 = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom1 = null;
		}
		
		private void attach_Banned_users(Banned_user entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom1 = this;
		}
		
		private void detach_Banned_users(Banned_user entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom1 = null;
		}
		
		private void attach_UsersInChatrooms(UsersInChatroom entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom = this;
		}
		
		private void detach_UsersInChatrooms(UsersInChatroom entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom = null;
		}
		
		private void attach_Permitted_users(Permitted_user entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom1 = this;
		}
		
		private void detach_Permitted_users(Permitted_user entity)
		{
			this.SendPropertyChanging();
			entity.Chatroom1 = null;
		}
	}
	
<<<<<<< .mine
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
=======
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersInChatroom")]
	public partial class UsersInChatroom : INotifyPropertyChanging, INotifyPropertyChanged
>>>>>>> .r50
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
<<<<<<< .mine
		private System.Data.Linq.Binary _image1;
=======
		private int _chatId;
>>>>>>> .r50
		
<<<<<<< .mine
		private string _imageType;
=======
		private System.Guid _userId;
>>>>>>> .r50
		
<<<<<<< .mine
		private long _imageSize;
=======
		private string _ActiveOnPhone;
		
		private EntityRef<aspnet_User> _aspnet_User;
>>>>>>> .r50
		
<<<<<<< .mine
		private string _imageName;
=======
		private EntityRef<Chatroom> _Chatroom;
>>>>>>> .r50
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
<<<<<<< .mine
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onimage1Changing(System.Data.Linq.Binary value);
    partial void Onimage1Changed();
    partial void OnimageTypeChanging(string value);
    partial void OnimageTypeChanged();
    partial void OnimageSizeChanging(long value);
    partial void OnimageSizeChanged();
    partial void OnimageNameChanging(string value);
    partial void OnimageNameChanged();
=======
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnchatIdChanging(int value);
    partial void OnchatIdChanged();
    partial void OnuserIdChanging(System.Guid value);
    partial void OnuserIdChanged();
    partial void OnActiveOnPhoneChanging(string value);
    partial void OnActiveOnPhoneChanged();
>>>>>>> .r50
    #endregion
		
<<<<<<< .mine
		public Image()
=======
		public UsersInChatroom()
>>>>>>> .r50
		{
<<<<<<< .mine
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
=======
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Chatroom = default(EntityRef<Chatroom>);
>>>>>>> .r50
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="image", Storage="_image1", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image1
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chatId", DbType="Int NOT NULL")]
		public int chatId
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._image1;
=======
				return this._chatId;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				if ((this._image1 != value))
=======
				if ((this._chatId != value))
>>>>>>> .r50
				{
<<<<<<< .mine
					this.Onimage1Changing(value);
=======
					if (this._Chatroom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchatIdChanging(value);
>>>>>>> .r50
					this.SendPropertyChanging();
<<<<<<< .mine
					this._image1 = value;
					this.SendPropertyChanged("image1");
					this.Onimage1Changed();
=======
					this._chatId = value;
					this.SendPropertyChanged("chatId");
					this.OnchatIdChanged();
>>>>>>> .r50
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imageType
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid userId
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._imageType;
=======
				return this._userId;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				if ((this._imageType != value))
=======
				if ((this._userId != value))
>>>>>>> .r50
				{
<<<<<<< .mine
					this.OnimageTypeChanging(value);
=======
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
>>>>>>> .r50
					this.SendPropertyChanging();
<<<<<<< .mine
					this._imageType = value;
					this.SendPropertyChanged("imageType");
					this.OnimageTypeChanged();
=======
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
>>>>>>> .r50
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageSize", DbType="BigInt NOT NULL")]
		public long imageSize
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveOnPhone", DbType="NChar(10)")]
		public string ActiveOnPhone
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._imageSize;
=======
				return this._ActiveOnPhone;
			}
			set
			{
				if ((this._ActiveOnPhone != value))
				{
					this.OnActiveOnPhoneChanging(value);
					this.SendPropertyChanging();
					this._ActiveOnPhone = value;
					this.SendPropertyChanged("ActiveOnPhone");
					this.OnActiveOnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UsersInChatroom", Storage="_aspnet_User", ThisKey="userId", OtherKey="UserId", IsForeignKey=true)]
		internal aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
>>>>>>> .r50
			}
			set
			{
				if ((this._imageSize != value))
				{
					this.OnimageSizeChanging(value);
					this.SendPropertyChanging();
<<<<<<< .mine
					this._imageSize = value;
					this.SendPropertyChanged("imageSize");
					this.OnimageSizeChanged();
=======
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UsersInChatrooms.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UsersInChatrooms.Add(this);
						this._userId = value.UserId;
					}
					else
					{
						this._userId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
>>>>>>> .r50
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string imageName
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_UsersInChatroom", Storage="_Chatroom", ThisKey="chatId", OtherKey="Id", IsForeignKey=true)]
		internal Chatroom Chatroom
>>>>>>> .r50
		{
			get
			{
<<<<<<< .mine
				return this._imageName;
=======
				return this._Chatroom.Entity;
>>>>>>> .r50
			}
			set
			{
<<<<<<< .mine
				if ((this._imageName != value))
=======
				Chatroom previousValue = this._Chatroom.Entity;
				if (((previousValue != value) 
							|| (this._Chatroom.HasLoadedOrAssignedValue == false)))
>>>>>>> .r50
				{
					this.OnimageNameChanging(value);
					this.SendPropertyChanging();
<<<<<<< .mine
					this._imageName = value;
					this.SendPropertyChanged("imageName");
					this.OnimageNameChanged();
=======
					if ((previousValue != null))
					{
						this._Chatroom.Entity = null;
						previousValue.UsersInChatrooms.Remove(this);
					}
					this._Chatroom.Entity = value;
					if ((value != null))
					{
						value.UsersInChatrooms.Add(this);
						this._chatId = value.Id;
					}
					else
					{
						this._chatId = default(int);
					}
					this.SendPropertyChanged("Chatroom");
>>>>>>> .r50
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Message", Storage="_Messages", ThisKey="id", OtherKey="imageId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private string _MobilePhoneNumber;
		
		private int _imageId;
		
		private EntitySet<Chatroom> _Chatrooms;
		
		private EntitySet<Banned_user> _Banned_users;
		
		private EntitySet<Moderator> _Moderators;
		
		private EntitySet<Permitted_user> _Permitted_users;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    partial void OnMobilePhoneNumberChanging(string value);
    partial void OnMobilePhoneNumberChanged();
    partial void OnimageIdChanging(int value);
    partial void OnimageIdChanged();
    #endregion
		
		public aspnet_User()
		{
			this._Chatrooms = new EntitySet<Chatroom>(new Action<Chatroom>(this.attach_Chatrooms), new Action<Chatroom>(this.detach_Chatrooms));
			this._Banned_users = new EntitySet<Banned_user>(new Action<Banned_user>(this.attach_Banned_users), new Action<Banned_user>(this.detach_Banned_users));
			this._Moderators = new EntitySet<Moderator>(new Action<Moderator>(this.attach_Moderators), new Action<Moderator>(this.detach_Moderators));
			this._Permitted_users = new EntitySet<Permitted_user>(new Action<Permitted_user>(this.attach_Permitted_users), new Action<Permitted_user>(this.detach_Permitted_users));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Permitted_user", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal aspnet_User aspnet_User
>>>>>>> .r50
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
<<<<<<< .mine
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chatroom_Permitted_user", Storage="_Chatroom1", ThisKey="Chatroom", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal Chatroom Chatroom1
>>>>>>> .r50
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhoneNumber", DbType="NVarChar(8)")]
		public string MobilePhoneNumber
		{
			get
			{
				return this._MobilePhoneNumber;
			}
			set
			{
				if ((this._MobilePhoneNumber != value))
				{
					this.OnMobilePhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._MobilePhoneNumber = value;
					this.SendPropertyChanged("MobilePhoneNumber");
					this.OnMobilePhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageId", DbType="Int NOT NULL")]
		public int imageId
		{
			get
			{
				return this._imageId;
			}
			set
			{
				if ((this._imageId != value))
				{
					this.OnimageIdChanging(value);
					this.SendPropertyChanging();
					this._imageId = value;
					this.SendPropertyChanged("imageId");
					this.OnimageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chatroom", Storage="_Chatrooms", ThisKey="UserId", OtherKey="OwnerId")]
		public EntitySet<Chatroom> Chatrooms
		{
			get
			{
				return this._Chatrooms;
			}
			set
			{
				this._Chatrooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Banned_user", Storage="_Banned_users", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Banned_user> Banned_users
		{
			get
			{
				return this._Banned_users;
			}
			set
			{
				this._Banned_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Moderator", Storage="_Moderators", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Moderator> Moderators
		{
			get
			{
				return this._Moderators;
			}
			set
			{
				this._Moderators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Permitted_user", Storage="_Permitted_users", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Permitted_user> Permitted_users
		{
			get
			{
				return this._Permitted_users;
			}
			set
			{
				this._Permitted_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Message", Storage="_Messages", ThisKey="UserId", OtherKey="AuthorId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chatrooms(Chatroom entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Chatrooms(Chatroom entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Banned_users(Banned_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Banned_users(Banned_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Moderators(Moderator entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Moderators(Moderator entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Permitted_users(Permitted_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Permitted_users(Permitted_user entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
}
#pragma warning restore 1591
